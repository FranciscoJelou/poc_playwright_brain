"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeOpenEyes = void 0;
const driver_1 = require("@applitools/driver");
const core_1 = require("./classic/core");
const core_2 = require("./ufg/core");
const get_typed_eyes_1 = require("./get-typed-eyes");
const check_1 = require("./check");
const check_and_close_1 = require("./check-and-close");
const close_1 = require("./close");
const get_eyes_results_1 = require("./get-eyes-results");
const extract_ci_provider_1 = require("./utils/extract-ci-provider");
const utils = __importStar(require("@applitools/utils"));
function makeOpenEyes({ type: defaultType = 'classic', concurrency, batch, core, cores, spec, logger: mainLogger, }) {
    return async function openEyes({ type = defaultType, settings, config, target, logger = mainLogger, }) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r, _s, _t, _u, _v, _w;
        var _x, _y, _z, _0;
        logger = logger.extend(mainLogger, { tags: [`eyes-${type}-${utils.general.shortid()}`] });
        settings = { ...config === null || config === void 0 ? void 0 : config.open, ...settings };
        (_a = settings.userTestId) !== null && _a !== void 0 ? _a : (settings.userTestId = `${settings.testName}--${utils.general.guid()}`);
        (_b = settings.eyesServerUrl) !== null && _b !== void 0 ? _b : (settings.eyesServerUrl = (_e = (_d = (_c = settings.serverUrl) !== null && _c !== void 0 ? _c : utils.general.getEnvValue('EYES_SERVER_URL')) !== null && _d !== void 0 ? _d : utils.general.getEnvValue('SERVER_URL')) !== null && _e !== void 0 ? _e : 'https://eyesapi.applitools.com');
        (_f = settings.apiKey) !== null && _f !== void 0 ? _f : (settings.apiKey = utils.general.getEnvValue('API_KEY'));
        (_g = settings.useDnsCache) !== null && _g !== void 0 ? _g : (settings.useDnsCache = utils.general.getEnvValue('USE_DNS_CACHE', 'boolean'));
        settings.batch = { ...batch, ...settings.batch };
        (_h = (_x = settings.batch).id) !== null && _h !== void 0 ? _h : (_x.id = (_j = utils.general.getEnvValue('BATCH_ID')) !== null && _j !== void 0 ? _j : `generated-${utils.general.guid()}`);
        (_k = (_y = settings.batch).name) !== null && _k !== void 0 ? _k : (_y.name = utils.general.getEnvValue('BATCH_NAME'));
        (_l = (_z = settings.batch).sequenceName) !== null && _l !== void 0 ? _l : (_z.sequenceName = utils.general.getEnvValue('BATCH_SEQUENCE'));
        (_m = (_0 = settings.batch).notifyOnCompletion) !== null && _m !== void 0 ? _m : (_0.notifyOnCompletion = utils.general.getEnvValue('BATCH_NOTIFY', 'boolean'));
        (_o = settings.keepBatchOpen) !== null && _o !== void 0 ? _o : (settings.keepBatchOpen = utils.general.getEnvValue('DONT_CLOSE_BATCHES', 'boolean'));
        (_p = settings.branchName) !== null && _p !== void 0 ? _p : (settings.branchName = utils.general.getEnvValue('BRANCH'));
        (_q = settings.parentBranchName) !== null && _q !== void 0 ? _q : (settings.parentBranchName = utils.general.getEnvValue('PARENT_BRANCH'));
        (_r = settings.baselineBranchName) !== null && _r !== void 0 ? _r : (settings.baselineBranchName = utils.general.getEnvValue('BASELINE_BRANCH'));
        (_s = settings.ignoreBaseline) !== null && _s !== void 0 ? _s : (settings.ignoreBaseline = false);
        (_t = settings.compareWithParentBranch) !== null && _t !== void 0 ? _t : (settings.compareWithParentBranch = false);
        const driver = target && (await (0, driver_1.makeDriver)({ spec, driver: target, logger, customConfig: settings }));
        core.logEvent({
            settings: {
                eyesServerUrl: settings.eyesServerUrl,
                apiKey: settings.apiKey,
                proxy: settings.proxy,
                agentId: settings.agentId,
                useDnsCache: settings.useDnsCache,
                level: 'Notice',
                event: {
                    type: 'runnerStarted',
                    testConcurrency: concurrency,
                    concurrentRendersPerTest: (_w = (_v = (_u = config === null || config === void 0 ? void 0 : config.check) === null || _u === void 0 ? void 0 : _u.renderers) === null || _v === void 0 ? void 0 : _v.length) !== null && _w !== void 0 ? _w : 1,
                    node: { version: process.version, platform: process.platform, arch: process.arch },
                    driverUrl: await (driver === null || driver === void 0 ? void 0 : driver.getDriverUrl()),
                    extractedCIProvider: (0, extract_ci_provider_1.extractCIProvider)(),
                },
            },
            logger,
        });
        const getTypedEyes = (0, get_typed_eyes_1.makeGetTypedEyes)({
            type,
            settings: settings,
            target: driver,
            cores: cores !== null && cores !== void 0 ? cores : {
                ufg: (0, core_2.makeCore)({ spec, base: core.base, concurrency: concurrency !== null && concurrency !== void 0 ? concurrency : 5, logger }),
                classic: (0, core_1.makeCore)({ spec, base: core.base, logger }),
            },
            logger,
        });
        const eyes = await getTypedEyes({ logger });
        return utils.general.extend(eyes, eyes => ({
            getTypedEyes,
            check: (0, check_1.makeCheck)({ type, eyes, target: driver, spec, logger }),
            checkAndClose: (0, check_and_close_1.makeCheckAndClose)({ type, eyes, target: driver, spec, logger }),
            close: (0, close_1.makeClose)({ eyes, logger }),
            getResults: (0, get_eyes_results_1.makeGetEyesResults)({ eyes, logger }),
        })); // TODO solve the types issue
    };
}
exports.makeOpenEyes = makeOpenEyes;
